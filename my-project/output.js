// Generated by psc-bundle 0.8.4.0
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                  
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var map = function (dict) {
      return dict.map;
  };
  var id = function (dict) {
      return dict.id;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var functorFn = new Functor(compose(semigroupoidFn));
  var $less$less$less = function (dictSemigroupoid) {
      return compose(dictSemigroupoid);
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  };
  var applyFn = new Apply(function () {
      return functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var bindFn = new Bind(function () {
      return applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var apply = function (dict) {
      return dict.apply;
  }; 
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["Show"] = Show;
  exports["Semiring"] = Semiring;
  exports["Bind"] = Bind;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["*"] = $times;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["apply"] = apply;
  exports["map"] = map;
  exports["id"] = id;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorFn"] = functorFn;
  exports["applyFn"] = applyFn;
  exports["bindFn"] = bindFn;
  exports["semiringNumber"] = semiringNumber;
  exports["showNumber"] = showNumber;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";        

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Function = PS["Data.Function"];
  var $$Math = PS["Math"];        
  var $less$less$up = binaryCompose;
  var square = Control_Bind.join(Prelude.bindFn)(Prelude["*"](Prelude.semiringNumber));
  var circleArea = function ($1) {
      return (function (v) {
          return $$Math.pi * v;
      })(square($1));
  };
  var binaryCompose = function ($2) {
      return Prelude["<<<"](Prelude.semigroupoidFn)(Prelude["<<<"](Prelude.semigroupoidFn)($2));
  };
  var diagonal = binaryCompose($$Math.sqrt)(Data_Function.on(Prelude["+"](Prelude.semiringNumber))(square));
  var main = Control_Monad_Eff_Console.print(Prelude.showNumber)(diagonal(3.0)(4.0));
  exports["<<^"] = $less$less$up;
  exports["binaryCompose"] = binaryCompose;
  exports["square"] = square;
  exports["diagonal"] = diagonal;
  exports["circleArea"] = circleArea;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
